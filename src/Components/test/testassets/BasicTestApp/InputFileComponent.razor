@using System.IO;
@using Microsoft.AspNetCore.Components.Web.Extensions

<h1>File preview</h1>

<InputFile OnChange="LoadFiles" />

<p>@fileName</p>
<p>@(fileSize.HasValue ? $"{fileSize} bytes" : null)</p>
<p>@content</p>

<h1>Multiple files</h1>

<p>A multi-file picker that displays information about selection and shows progress as each one is loaded.</p>

<label for="uploadFiles">Select File(s)</label>
<InputFile id="uploadFiles" multiple OnChange="SetSelectedFiles" />

<label for="uploadFolder">Select Folder</label>
<InputFile id="uploadFolder" multiple webkitdirectory OnChange="SetSelectedFiles" />

@if (selectedFiles != null)
{
    foreach (var file in selectedFiles)
    {
        bool isLoading = openedFiles.TryGetValue(file, out var fileStream);

        <div class="file-row">-->
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
                Size: <strong>@file.Size bytes</strong>;
                Last modified: <strong>@file.LastModified.ToString()</strong>;
                Type: <strong>@file.Type</strong>
                Relative Path: <strong>@file.RelativePath</strong>
            </div>

            <!-- Upload button -->
            <button @onclick="() => LoadFile(file)" disabled="@isLoading">
                @if (!isLoading)
                {
                    <span>Load</span>
                }
                else
                {
                    <span>Loading...</span>
                }
            </button>
        </div>
    }
}

@code {
    IReadOnlyList<IBrowserFile> selectedFiles;

    Dictionary<IBrowserFile, Stream> openedFiles = new Dictionary<IBrowserFile, Stream>();

    string fileName;
    long? fileSize;
    string content;

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.Files.FirstOrDefault();
        fileName = null;
        fileSize = null;

        if (file != null)
        {
            content = "Loading...";

            using var reader = new StreamReader(file.OpenReadStream());

            content = await reader.ReadToEndAsync();
            fileName = file.Name;
            fileSize = file.Size;
        }
    }

    void SetSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.Files;
    }

    async Task LoadFile(IBrowserFile file)
    {
        // Just load into .NET memory to show it can be done
        // Alternatively it could be saved to disk, or parsed in memory, or similar
        using var ms = new MemoryStream();
        using var fileStream = file.OpenReadStream();

        openedFiles[file] = fileStream;

        await fileStream.CopyToAsync(ms);

        openedFiles.Remove(file);
    }
}
